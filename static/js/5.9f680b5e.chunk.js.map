{"version":3,"sources":["views/LoginView.js"],"names":["LoginView","state","email","password","handleChange","target","name","value","setState","handleSubmit","e","preventDefault","props","onLogin","this","className","onSubmit","autoComplete","htmlFor","type","onChange","Component","mapDispatchToProps","authOperations","logIn","connect","error","authSelectors","getError","isLoadingAuth","getLoading"],"mappings":"4MAMMA,E,4MAMJC,MAAQ,CACNC,MAAO,GACPC,SAAU,I,EAGZC,aAAe,YAAkC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAChC,EAAKC,SAAL,eAAiBF,EAAOC,K,EAG1BE,aAAe,SAAAC,GACbA,EAAEC,iBAEF,EAAKC,MAAMC,QAAQ,EAAKZ,OAExB,EAAKO,SAAS,CAAEF,KAAM,GAAIJ,MAAO,GAAIC,SAAU,M,4CAGjD,WAAU,IAAD,EACqBW,KAAKb,MAAzBC,EADD,EACCA,MAAOC,EADR,EACQA,SAEf,OACE,gCACE,oBAAIY,UAAU,QAAd,6BACA,uBAAMA,UAAU,OAAOC,SAAUF,KAAKL,aAAcQ,aAAa,MAAjE,UACE,uBAAOC,QAAQ,QAAQH,UAAU,QAAjC,mBAGA,uBACEA,UAAU,QACVI,KAAK,QACLb,KAAK,QACLC,MAAOL,EACPkB,SAAUN,KAAKV,eAGjB,uBAAOc,QAAQ,WAAWH,UAAU,QAApC,sBAGA,uBACEA,UAAU,QACVI,KAAK,WACLb,KAAK,WACLC,MAAOJ,EACPiB,SAAUN,KAAKV,eAGjB,wBAAQW,UAAU,SAASI,KAAK,SAAhC,6B,GApDcE,aAkElBC,EAAqB,CACzBT,QAASU,IAAeC,OAGXC,uBATS,SAAAxB,GAAK,MAAK,CAChCyB,MAAOC,IAAcC,SAAS3B,GAC9B4B,cAAeF,IAAcG,WAAW7B,MAOFqB,EAAzBG,CAA6CzB","file":"static/js/5.9f680b5e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport authOperations from '../redux/auth/auth-operations';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nclass LoginView extends Component {\r\n  static propTypes = {\r\n    error: PropTypes.string,\r\n    isLoadingAuth: PropTypes.bool,\r\n  };\r\n\r\n  state = {\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  handleChange = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onLogin(this.state);\r\n\r\n    this.setState({ name: '', email: '', password: '' });\r\n  };\r\n\r\n  render() {\r\n    const { email, password } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <h1 className=\"Title\">Enter your data</h1>\r\n        <form className=\"Form\" onSubmit={this.handleSubmit} autoComplete=\"off\">\r\n          <label htmlFor=\"email\" className=\"Label\">\r\n            Email\r\n          </label>\r\n          <input\r\n            className=\"Input\"\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={this.handleChange}\r\n          />\r\n\r\n          <label htmlFor=\"password\" className=\"Label\">\r\n            Password\r\n          </label>\r\n          <input\r\n            className=\"Input\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={this.handleChange}\r\n          />\r\n\r\n          <button className=\"Button\" type=\"submit\">\r\n            Login\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  error: authSelectors.getError(state),\r\n  isLoadingAuth: authSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogin: authOperations.logIn,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginView);\r\n"],"sourceRoot":""}